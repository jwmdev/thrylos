// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package thrylos

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UTXO struct {
	_tab flatbuffers.Table
}

func GetRootAsUTXO(buf []byte, offset flatbuffers.UOffsetT) *UTXO {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UTXO{}
	x.Init(buf, n+offset)
	return x
}

func FinishUTXOBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUTXO(buf []byte, offset flatbuffers.UOffsetT) *UTXO {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UTXO{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUTXOBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *UTXO) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UTXO) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UTXO) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UTXO) Index() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UTXO) MutateIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *UTXO) OwnerAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UTXO) Amount() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UTXO) MutateAmount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func UTXOStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func UTXOAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(transactionId), 0)
}
func UTXOAddIndex(builder *flatbuffers.Builder, index int32) {
	builder.PrependInt32Slot(1, index, 0)
}
func UTXOAddOwnerAddress(builder *flatbuffers.Builder, ownerAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ownerAddress), 0)
}
func UTXOAddAmount(builder *flatbuffers.Builder, amount int64) {
	builder.PrependInt64Slot(3, amount, 0)
}
func UTXOEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
