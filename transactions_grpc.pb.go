// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: transactions.proto

package thrylos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockchainService_SubmitTransaction_FullMethodName         = "/thrylos.BlockchainService/SubmitTransaction"
	BlockchainService_GetBlock_FullMethodName                  = "/thrylos.BlockchainService/GetBlock"
	BlockchainService_GetTransaction_FullMethodName            = "/thrylos.BlockchainService/GetTransaction"
	BlockchainService_GetLastBlock_FullMethodName              = "/thrylos.BlockchainService/GetLastBlock"
	BlockchainService_SubmitTransactionBatch_FullMethodName    = "/thrylos.BlockchainService/SubmitTransactionBatch"
	BlockchainService_GetBalance_FullMethodName                = "/thrylos.BlockchainService/GetBalance"
	BlockchainService_GetStats_FullMethodName                  = "/thrylos.BlockchainService/GetStats"
	BlockchainService_GetPendingTransactions_FullMethodName    = "/thrylos.BlockchainService/GetPendingTransactions"
	BlockchainService_GetBlockByHash_FullMethodName            = "/thrylos.BlockchainService/GetBlockByHash"
	BlockchainService_GetBlockByIndex_FullMethodName           = "/thrylos.BlockchainService/GetBlockByIndex"
	BlockchainService_SubscribeToBalanceUpdates_FullMethodName = "/thrylos.BlockchainService/SubscribeToBalanceUpdates"
	BlockchainService_StreamBalance_FullMethodName             = "/thrylos.BlockchainService/StreamBalance"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	SubmitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetLastBlock(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	SubmitTransactionBatch(ctx context.Context, in *TransactionBatchRequest, opts ...grpc.CallOption) (*TransactionBatchResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	GetPendingTransactions(ctx context.Context, in *GetPendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error)
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	GetBlockByIndex(ctx context.Context, in *GetBlockByIndexRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	SubscribeToBalanceUpdates(ctx context.Context, in *BalanceSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceMessage], error)
	StreamBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceResponse], error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) SubmitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BlockchainService_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetLastBlock(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetLastBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) SubmitTransactionBatch(ctx context.Context, in *TransactionBatchRequest, opts ...grpc.CallOption) (*TransactionBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionBatchResponse)
	err := c.cc.Invoke(ctx, BlockchainService_SubmitTransactionBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetPendingTransactions(ctx context.Context, in *GetPendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PendingTransactionsResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetPendingTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlockByIndex(ctx context.Context, in *GetBlockByIndexRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlockByIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) SubscribeToBalanceUpdates(ctx context.Context, in *BalanceSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[0], BlockchainService_SubscribeToBalanceUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BalanceSubscriptionRequest, BalanceMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainService_SubscribeToBalanceUpdatesClient = grpc.ServerStreamingClient[BalanceMessage]

func (c *blockchainServiceClient) StreamBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlockchainService_ServiceDesc.Streams[1], BlockchainService_StreamBalance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBalanceRequest, BalanceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainService_StreamBalanceClient = grpc.ServerStreamingClient[BalanceResponse]

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility.
type BlockchainServiceServer interface {
	SubmitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	GetBlock(context.Context, *GetBlockRequest) (*BlockResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*TransactionResponse, error)
	GetLastBlock(context.Context, *EmptyRequest) (*BlockResponse, error)
	SubmitTransactionBatch(context.Context, *TransactionBatchRequest) (*TransactionBatchResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	GetPendingTransactions(context.Context, *GetPendingTransactionsRequest) (*PendingTransactionsResponse, error)
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*BlockResponse, error)
	GetBlockByIndex(context.Context, *GetBlockByIndexRequest) (*BlockResponse, error)
	SubscribeToBalanceUpdates(*BalanceSubscriptionRequest, grpc.ServerStreamingServer[BalanceMessage]) error
	StreamBalance(*GetBalanceRequest, grpc.ServerStreamingServer[BalanceResponse]) error
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainServiceServer struct{}

func (UnimplementedBlockchainServiceServer) SubmitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlock(context.Context, *GetBlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedBlockchainServiceServer) GetLastBlock(context.Context, *EmptyRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) SubmitTransactionBatch(context.Context, *TransactionBatchRequest) (*TransactionBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransactionBatch not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBlockchainServiceServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedBlockchainServiceServer) GetPendingTransactions(context.Context, *GetPendingTransactionsRequest) (*PendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactions not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlockByHash(context.Context, *GetBlockByHashRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlockByIndex(context.Context, *GetBlockByIndexRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByIndex not implemented")
}
func (UnimplementedBlockchainServiceServer) SubscribeToBalanceUpdates(*BalanceSubscriptionRequest, grpc.ServerStreamingServer[BalanceMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToBalanceUpdates not implemented")
}
func (UnimplementedBlockchainServiceServer) StreamBalance(*GetBalanceRequest, grpc.ServerStreamingServer[BalanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBalance not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}
func (UnimplementedBlockchainServiceServer) testEmbeddedByValue()                           {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).SubmitTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetLastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetLastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetLastBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetLastBlock(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_SubmitTransactionBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).SubmitTransactionBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_SubmitTransactionBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).SubmitTransactionBatch(ctx, req.(*TransactionBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetPendingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetPendingTransactions(ctx, req.(*GetPendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlockByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlockByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlockByIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlockByIndex(ctx, req.(*GetBlockByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_SubscribeToBalanceUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalanceSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).SubscribeToBalanceUpdates(m, &grpc.GenericServerStream[BalanceSubscriptionRequest, BalanceMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainService_SubscribeToBalanceUpdatesServer = grpc.ServerStreamingServer[BalanceMessage]

func _BlockchainService_StreamBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockchainServiceServer).StreamBalance(m, &grpc.GenericServerStream[GetBalanceRequest, BalanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockchainService_StreamBalanceServer = grpc.ServerStreamingServer[BalanceResponse]

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thrylos.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _BlockchainService_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockchainService_GetBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BlockchainService_GetTransaction_Handler,
		},
		{
			MethodName: "GetLastBlock",
			Handler:    _BlockchainService_GetLastBlock_Handler,
		},
		{
			MethodName: "SubmitTransactionBatch",
			Handler:    _BlockchainService_SubmitTransactionBatch_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BlockchainService_GetBalance_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _BlockchainService_GetStats_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _BlockchainService_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _BlockchainService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByIndex",
			Handler:    _BlockchainService_GetBlockByIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToBalanceUpdates",
			Handler:       _BlockchainService_SubscribeToBalanceUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBalance",
			Handler:       _BlockchainService_StreamBalance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transactions.proto",
}
